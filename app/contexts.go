// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Daikon-BE": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/Kumi-comb/Daikon-BE/design
// --out=$(GOPATH)\src\github.com\Kumi-comb\Daikon-BE
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateLinkcodeContext provides the linkcode create action context.
type CreateLinkcodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UniqueCode string
}

// NewCreateLinkcodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the linkcode controller create action.
func NewCreateLinkcodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateLinkcodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateLinkcodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUniqueCode := req.Params["uniqueCode"]
	if len(paramUniqueCode) > 0 {
		rawUniqueCode := paramUniqueCode[0]
		rctx.UniqueCode = rawUniqueCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateLinkcodeContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetStatusContext provides the status get action context.
type GetStatusContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UniqueCode string
}

// NewGetStatusContext parses the incoming request URL and body, performs validations and creates the
// context used by the status controller get action.
func NewGetStatusContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetStatusContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetStatusContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUniqueCode := req.Params["uniqueCode"]
	if len(paramUniqueCode) > 0 {
		rawUniqueCode := paramUniqueCode[0]
		rctx.UniqueCode = rawUniqueCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetStatusContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
