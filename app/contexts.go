// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Daikon-BE": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/Kumi-comb/Daikon-BE/design
// --out=$(GOPATH)\src\github.com\Kumi-comb\Daikon-BE
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateAccountAccountsContext provides the accounts createAccount action context.
type CreateAccountAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateAccountAccountsPayload
}

// NewCreateAccountAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller createAccount action.
func NewCreateAccountAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateAccountAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateAccountAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createAccountAccountsPayload is the accounts createAccount action payload.
type createAccountAccountsPayload struct {
	Password   *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	ScreenName *string `form:"screenName,omitempty" json:"screenName,omitempty" yaml:"screenName,omitempty" xml:"screenName,omitempty"`
}

// Publicize creates CreateAccountAccountsPayload from createAccountAccountsPayload
func (payload *createAccountAccountsPayload) Publicize() *CreateAccountAccountsPayload {
	var pub CreateAccountAccountsPayload
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.ScreenName != nil {
		pub.ScreenName = payload.ScreenName
	}
	return &pub
}

// CreateAccountAccountsPayload is the accounts createAccount action payload.
type CreateAccountAccountsPayload struct {
	Password   *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	ScreenName *string `form:"screenName,omitempty" json:"screenName,omitempty" yaml:"screenName,omitempty" xml:"screenName,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateAccountAccountsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateAccountAccountsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeviceListDevicesContext provides the devices deviceList action context.
type DeviceListDevicesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewDeviceListDevicesContext parses the incoming request URL and body, performs validations and creates the
// context used by the devices controller deviceList action.
func NewDeviceListDevicesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeviceListDevicesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeviceListDevicesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeviceListDevicesContext) OK(r []string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GenerateLinkCodeDevicesContext provides the devices generateLinkCode action context.
type GenerateLinkCodeDevicesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UniqueCode string
}

// NewGenerateLinkCodeDevicesContext parses the incoming request URL and body, performs validations and creates the
// context used by the devices controller generateLinkCode action.
func NewGenerateLinkCodeDevicesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GenerateLinkCodeDevicesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GenerateLinkCodeDevicesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUniqueCode := req.Params["uniqueCode"]
	if len(paramUniqueCode) > 0 {
		rawUniqueCode := paramUniqueCode[0]
		rctx.UniqueCode = rawUniqueCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GenerateLinkCodeDevicesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// LinkDeviceDevicesContext provides the devices linkDevice action context.
type LinkDeviceDevicesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LinkCode string
}

// NewLinkDeviceDevicesContext parses the incoming request URL and body, performs validations and creates the
// context used by the devices controller linkDevice action.
func NewLinkDeviceDevicesContext(ctx context.Context, r *http.Request, service *goa.Service) (*LinkDeviceDevicesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LinkDeviceDevicesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLinkCode := req.Params["linkCode"]
	if len(paramLinkCode) > 0 {
		rawLinkCode := paramLinkCode[0]
		rctx.LinkCode = rawLinkCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LinkDeviceDevicesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *LinkDeviceDevicesContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// SigninJWTContext provides the jwt signin action context.
type SigninJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SigninJWTPayload
}

// NewSigninJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signin action.
func NewSigninJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*SigninJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SigninJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// signinJWTPayload is the jwt signin action payload.
type signinJWTPayload struct {
	Password       *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	UserScreenName *string `form:"userScreenName,omitempty" json:"userScreenName,omitempty" yaml:"userScreenName,omitempty" xml:"userScreenName,omitempty"`
}

// Publicize creates SigninJWTPayload from signinJWTPayload
func (payload *signinJWTPayload) Publicize() *SigninJWTPayload {
	var pub SigninJWTPayload
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.UserScreenName != nil {
		pub.UserScreenName = payload.UserScreenName
	}
	return &pub
}

// SigninJWTPayload is the jwt signin action payload.
type SigninJWTPayload struct {
	Password       *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	UserScreenName *string `form:"userScreenName,omitempty" json:"userScreenName,omitempty" yaml:"userScreenName,omitempty" xml:"userScreenName,omitempty"`
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SigninJWTContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *SigninJWTContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// SupportLineResourcesContext provides the resources supportLine action context.
type SupportLineResourcesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSupportLineResourcesContext parses the incoming request URL and body, performs validations and creates the
// context used by the resources controller supportLine action.
func NewSupportLineResourcesContext(ctx context.Context, r *http.Request, service *goa.Service) (*SupportLineResourcesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SupportLineResourcesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SupportLineResourcesContext) OK(r []*LineInformation) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetStatusContext provides the status get action context.
type GetStatusContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UniqueCode string
}

// NewGetStatusContext parses the incoming request URL and body, performs validations and creates the
// context used by the status controller get action.
func NewGetStatusContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetStatusContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetStatusContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUniqueCode := req.Params["uniqueCode"]
	if len(paramUniqueCode) > 0 {
		rawUniqueCode := paramUniqueCode[0]
		rctx.UniqueCode = rawUniqueCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetStatusContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetStatusContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SettingsStatusContext provides the status settings action context.
type SettingsStatusContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UniqueCode string
	Payload    *SettingsStatusPayload
}

// NewSettingsStatusContext parses the incoming request URL and body, performs validations and creates the
// context used by the status controller settings action.
func NewSettingsStatusContext(ctx context.Context, r *http.Request, service *goa.Service) (*SettingsStatusContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SettingsStatusContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUniqueCode := req.Params["uniqueCode"]
	if len(paramUniqueCode) > 0 {
		rawUniqueCode := paramUniqueCode[0]
		rctx.UniqueCode = rawUniqueCode
	}
	return &rctx, err
}

// settingsStatusPayload is the status settings action payload.
type settingsStatusPayload struct {
	ContinueTimes  *string `form:"continueTimes,omitempty" json:"continueTimes,omitempty" yaml:"continueTimes,omitempty" xml:"continueTimes,omitempty"`
	Lines          *string `form:"lines,omitempty" json:"lines,omitempty" yaml:"lines,omitempty" xml:"lines,omitempty"`
	Password       *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	UserScreenName *string `form:"userScreenName,omitempty" json:"userScreenName,omitempty" yaml:"userScreenName,omitempty" xml:"userScreenName,omitempty"`
}

// Publicize creates SettingsStatusPayload from settingsStatusPayload
func (payload *settingsStatusPayload) Publicize() *SettingsStatusPayload {
	var pub SettingsStatusPayload
	if payload.ContinueTimes != nil {
		pub.ContinueTimes = payload.ContinueTimes
	}
	if payload.Lines != nil {
		pub.Lines = payload.Lines
	}
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.UserScreenName != nil {
		pub.UserScreenName = payload.UserScreenName
	}
	return &pub
}

// SettingsStatusPayload is the status settings action payload.
type SettingsStatusPayload struct {
	ContinueTimes  *string `form:"continueTimes,omitempty" json:"continueTimes,omitempty" yaml:"continueTimes,omitempty" xml:"continueTimes,omitempty"`
	Lines          *string `form:"lines,omitempty" json:"lines,omitempty" yaml:"lines,omitempty" xml:"lines,omitempty"`
	Password       *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	UserScreenName *string `form:"userScreenName,omitempty" json:"userScreenName,omitempty" yaml:"userScreenName,omitempty" xml:"userScreenName,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *SettingsStatusContext) OK(r *Settings) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "appliaction/vnd.settings")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SettingsStatusContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
