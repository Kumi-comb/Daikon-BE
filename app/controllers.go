// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Daikon-BE": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/Kumi-comb/Daikon-BE/design
// --out=$(GOPATH)\src\github.com\Kumi-comb\Daikon-BE
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AccountsController is the controller interface for the Accounts actions.
type AccountsController interface {
	goa.Muxer
	CreateAccount(*CreateAccountAccountsContext) error
}

// MountAccountsController "mounts" a Accounts resource controller on the given service.
func MountAccountsController(service *goa.Service, ctrl AccountsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateAccountAccountsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateAccountAccountsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateAccount(rctx)
	}
	service.Mux.Handle("POST", "/accounts", ctrl.MuxHandler("createAccount", h, unmarshalCreateAccountAccountsPayload))
	service.LogInfo("mount", "ctrl", "Accounts", "action", "CreateAccount", "route", "POST /accounts")
}

// unmarshalCreateAccountAccountsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateAccountAccountsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createAccountAccountsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// DevicesController is the controller interface for the Devices actions.
type DevicesController interface {
	goa.Muxer
	DeviceList(*DeviceListDevicesContext) error
	GenerateLinkCode(*GenerateLinkCodeDevicesContext) error
	LinkDevice(*LinkDeviceDevicesContext) error
}

// MountDevicesController "mounts" a Devices resource controller on the given service.
func MountDevicesController(service *goa.Service, ctrl DevicesController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeviceListDevicesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeviceList(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/devices", ctrl.MuxHandler("deviceList", h, nil))
	service.LogInfo("mount", "ctrl", "Devices", "action", "DeviceList", "route", "GET /devices", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGenerateLinkCodeDevicesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GenerateLinkCode(rctx)
	}
	service.Mux.Handle("GET", "/devices/:uniqueCode", ctrl.MuxHandler("generateLinkCode", h, nil))
	service.LogInfo("mount", "ctrl", "Devices", "action", "GenerateLinkCode", "route", "GET /devices/:uniqueCode")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLinkDeviceDevicesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.LinkDevice(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("POST", "/devices/link/:linkCode", ctrl.MuxHandler("linkDevice", h, nil))
	service.LogInfo("mount", "ctrl", "Devices", "action", "LinkDevice", "route", "POST /devices/link/:linkCode", "security", "jwt")
}

// JWTController is the controller interface for the JWT actions.
type JWTController interface {
	goa.Muxer
	Signin(*SigninJWTContext) error
}

// MountJWTController "mounts" a JWT resource controller on the given service.
func MountJWTController(service *goa.Service, ctrl JWTController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSigninJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SigninJWTPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Signin(rctx)
	}
	service.Mux.Handle("POST", "/jwt/signin", ctrl.MuxHandler("signin", h, unmarshalSigninJWTPayload))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Signin", "route", "POST /jwt/signin")
}

// unmarshalSigninJWTPayload unmarshals the request body into the context request data Payload field.
func unmarshalSigninJWTPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &signinJWTPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ResourcesController is the controller interface for the Resources actions.
type ResourcesController interface {
	goa.Muxer
	SupportLine(*SupportLineResourcesContext) error
}

// MountResourcesController "mounts" a Resources resource controller on the given service.
func MountResourcesController(service *goa.Service, ctrl ResourcesController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSupportLineResourcesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.SupportLine(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/resources/supports/lines", ctrl.MuxHandler("supportLine", h, nil))
	service.LogInfo("mount", "ctrl", "Resources", "action", "SupportLine", "route", "GET /resources/supports/lines", "security", "jwt")
}

// StatusController is the controller interface for the Status actions.
type StatusController interface {
	goa.Muxer
	Get(*GetStatusContext) error
	Settings(*SettingsStatusContext) error
}

// MountStatusController "mounts" a Status resource controller on the given service.
func MountStatusController(service *goa.Service, ctrl StatusController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetStatusContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/status/:uniqueCode", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Status", "action", "Get", "route", "GET /status/:uniqueCode")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSettingsStatusContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SettingsStatusPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Settings(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("POST", "/status/:uniqueCode/settings", ctrl.MuxHandler("settings", h, unmarshalSettingsStatusPayload))
	service.LogInfo("mount", "ctrl", "Status", "action", "Settings", "route", "POST /status/:uniqueCode/settings", "security", "jwt")
}

// unmarshalSettingsStatusPayload unmarshals the request body into the context request data Payload field.
func unmarshalSettingsStatusPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &settingsStatusPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
