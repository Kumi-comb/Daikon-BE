// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Daikon-BE": devices Resource Client
//
// Command:
// $ goagen
// --design=github.com/Kumi-comb/Daikon-BE/design
// --out=$(GOPATH)\src\github.com\Kumi-comb\Daikon-BE
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// DeviceListDevicesPath computes a request path to the deviceList action of devices.
func DeviceListDevicesPath() string {

	return fmt.Sprintf("/devices")
}

// デバイス一覧を返す
func (c *Client) DeviceListDevices(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeviceListDevicesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeviceListDevicesRequest create the request corresponding to the deviceList action endpoint of the devices resource.
func (c *Client) NewDeviceListDevicesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GenerateLinkCodeDevicesPath computes a request path to the generateLinkCode action of devices.
func GenerateLinkCodeDevicesPath(uniqueCode string) string {
	param0 := uniqueCode

	return fmt.Sprintf("/devices/%s", param0)
}

// ユニークコードを使用してリンクコードを生成する
func (c *Client) GenerateLinkCodeDevices(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGenerateLinkCodeDevicesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGenerateLinkCodeDevicesRequest create the request corresponding to the generateLinkCode action endpoint of the devices resource.
func (c *Client) NewGenerateLinkCodeDevicesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// LinkDeviceDevicesPath computes a request path to the linkDevice action of devices.
func LinkDeviceDevicesPath(linkCode string) string {
	param0 := linkCode

	return fmt.Sprintf("/devices/%s", param0)
}

// リンクコードを使用してユニークコードとアカウントを鎖付けする
func (c *Client) LinkDeviceDevices(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLinkDeviceDevicesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLinkDeviceDevicesRequest create the request corresponding to the linkDevice action endpoint of the devices resource.
func (c *Client) NewLinkDeviceDevicesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
