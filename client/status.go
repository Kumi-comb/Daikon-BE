// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Daikon-BE": status Resource Client
//
// Command:
// $ goagen
// --design=github.com/Kumi-comb/Daikon-BE/design
// --out=$(GOPATH)\src\github.com\Kumi-comb\Daikon-BE
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// GetStatusPath computes a request path to the get action of status.
func GetStatusPath(uniqueCode string) string {
	param0 := uniqueCode

	return fmt.Sprintf("/status/%s", param0)
}

// ユニークコードを基にデバイスが本来あるべき状態のデータを取得する
func (c *Client) GetStatus(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetStatusRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetStatusRequest create the request corresponding to the get action endpoint of the status resource.
func (c *Client) NewGetStatusRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// SettingsStatusPayload is the status settings action payload.
type SettingsStatusPayload struct {
	ContinueTimes  *string `form:"continueTimes,omitempty" json:"continueTimes,omitempty" yaml:"continueTimes,omitempty" xml:"continueTimes,omitempty"`
	Lines          *string `form:"lines,omitempty" json:"lines,omitempty" yaml:"lines,omitempty" xml:"lines,omitempty"`
	Password       *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	UserScreenName *string `form:"userScreenName,omitempty" json:"userScreenName,omitempty" yaml:"userScreenName,omitempty" xml:"userScreenName,omitempty"`
}

// SettingsStatusPath computes a request path to the settings action of status.
func SettingsStatusPath(uniqueCode string) string {
	param0 := uniqueCode

	return fmt.Sprintf("/status/%s/settings", param0)
}

// デバイスの設定を定義する
func (c *Client) SettingsStatus(ctx context.Context, path string, payload *SettingsStatusPayload, contentType string) (*http.Response, error) {
	req, err := c.NewSettingsStatusRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSettingsStatusRequest create the request corresponding to the settings action endpoint of the status resource.
func (c *Client) NewSettingsStatusRequest(ctx context.Context, path string, payload *SettingsStatusPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
